# ============================================================================
# --- README ---
# ============================================================================

usage: add2sqlite_l1c_info.py [-h] -dat DATE -sat SATELLITE -inp INPDIR -sql
                              SQLITE [-ver]

add2sqlite_l1c_info.py reads pyGAC L1c output h5 orbit files (avhrr,
qualflags) and adds to L1b sqlite database, valuable L1c information for each
orbit, which has been processed by pyGAC (white-listed L1b). Thus, this script
adds the start and end time of measurement, i.e. timestamp of first and last
scanline, as well as the along and across track dimension. This L1c
information will be later used for calculating the number of AVHRR GAC
overlapping scanlines of two consecutive orbits.

optional arguments:
  -h, --help            show this help message and exit
  -dat DATE, --date DATE
                        String, e.g. 20000101, 2000-01-01
  -sat SATELLITE, --satellite SATELLITE
                        String, e.g. noaa19, NOAA19
  -inp INPDIR, --inpdir INPDIR
                        String, e.g. /path/to/input/files.h5
  -sql SQLITE, --sqlite SQLITE
                        /path/to/AVHRR_GAC_archive_L1b_L1c.sqlite3, which
                        should be updated with L1c information
  -ver, --verbose       increase output verbosity

# ============================================================================
usage: bugsearch_pygac.py [-h] -i IPASS -o OPROC [-v]

bugsearch_pygac.py searches for the L1b file, which was passed to pyGAC but
not processed by pyGAC without emmitting a Traceback notification. Input files
are *L1b_pass.log and *L1c_proc.log files, which are compared to figure out
which L1b orbit failed.

optional arguments:
  -h, --help            show this help message and exit
  -i IPASS, --ipass IPASS
                        log file containing the L1b files passed to pyGAC
  -o OPROC, --oproc OPROC
                        log file containing the L1c files produced by pyGAC
  -v, --verbose         increase output verbosity

# ============================================================================
usage: multi_pystat_avhrrgac_l1c.py [-h] -d DATE -s SATELLITE -i INPDIR -o
                                    OUTDIR [-b BINSIZE] [-t] [-v] [-g GSQLITE]

multi_pystat_avhrrgac_l1c.py calculates statistics (daily zonal and global
means) of AVHRR GAC L1c data processed in the framework of Cloud_cci (pyGAC).
For the VIS channels, statistics is based on daytime observations only, i.e.
SZA less than 80. For the IR channels day/twilight/night observations are
considered. Additionally, 2 different PNG files are created based on the
statistics. Orbits are processed in parallel mode.

optional arguments:
  -h, --help            show this help message and exit
  -d DATE, --date DATE  Date String, e.g. 20090126
  -s SATELLITE, --satellite SATELLITE
                        Satellite, e.g. metop02
  -i INPDIR, --inpdir INPDIR
                        Path, e.g. /path/to/input
  -o OUTDIR, --outdir OUTDIR
                        Path, e.g. /path/to/output
  -b BINSIZE, --binsize BINSIZE
                        Define binsize for latitudinal belts
  -t, --test            Run test with reduced channel and select list
  -v, --verbose         increase output verbosity
  -g GSQLITE, --gsqlite GSQLITE
                        /path/to/AVHRR_GAC_global_pystat.sqlite3, which
                        archives global means/stdvs for each satellite

# ============================================================================
usage: pystat_avhrrgac_l1c.py [-h] -d DATE -s SATELLITE -i INPDIR -o OUTDIR
                              [-b BINSIZE] [-t] [-v] [-g GSQLITE]

pystat_avhrrgac_l1c.py calculates statistics (daily zonal and global means) of
AVHRR GAC Level 1c data processed in the framework of cloud_cci (gyGAC). For
the VIS channels, statistics is based on daytime observations only, i.e. SZA
less than 80. For the IR channels day/twilight/night observations are
considered. Additionally, 2 different PNG files are created based on the
statistics. Orbits are processed in serial mode.

optional arguments:
  -h, --help            show this help message and exit
  -d DATE, --date DATE  Date String, e.g. 20090126
  -s SATELLITE, --satellite SATELLITE
                        Satellite, e.g. metop02
  -i INPDIR, --inpdir INPDIR
                        Path, e.g. /path/to/files
  -o OUTDIR, --outdir OUTDIR
                        Path, e.g. /path/to/output
  -b BINSIZE, --binsize BINSIZE
                        Define binsize for latitudinal belts
  -t, --test            Run test with reduced channel and select list
  -v, --verbose         increase output verbosity
  -g GSQLITE, --gsqlite GSQLITE
                        /path/to/AVHRR_GAC_global_pystat.sqlite3, which
                        archives global means/stdvs for each satellite

# ============================================================================
usage: run_pystat_add2sqlite.py [-h] -d DATE -s SATELLITE -i INPDIR -g GSQLITE
                                [-b BINSIZE] [-t] [-v]

run_pystat_add2sqlite.py calculates statistics (daily zonal and global means)
of AVHRR GAC L1c data processed in the framework of Cloud_cci (pyGAC). For the
VIS channels, statistics is based on daytime observations only, i.e. SZA less
than 80. For the IR channels day/twilight/night observations are considered.
Statistics are stored in a sqlite db. Orbits are processed in parallel mode.

optional arguments:
  -h, --help            show this help message and exit
  -d DATE, --date DATE  Date String, e.g. 20090126
  -s SATELLITE, --satellite SATELLITE
                        Satellite, e.g. metop02
  -i INPDIR, --inpdir INPDIR
                        Path, e.g. /path/to/input
  -g GSQLITE, --gsqlite GSQLITE
                        /path/to/AVHRR_GAC_L1c_pystat.sqlite3
  -b BINSIZE, --binsize BINSIZE
                        Define binsize for latitudinal belts
  -t, --test            Run test with reduced channel and select list
  -v, --verbose         increase output verbosity

# ============================================================================
usage: vis_avhrrgac_l1c.py [-h] -c CHANNEL -f FILENAME [-r REGION] [-t TIME]
                           [-v]

This script displays one AVHRR GAC Level 1c orbit processed in the framework
of cloud_cci (gyGAC).

optional arguments:
  -h, --help            show this help message and exit
  -c CHANNEL, --channel CHANNEL
                        ch1|ch2|ch3b|ch4|ch5|ch3a
  -f FILENAME, --filename FILENAME
                        /path/to/ECC_GAC_file.h5
  -r REGION, --region REGION
                        afr, eur, ger, glo, rus
  -t TIME, --time TIME  day|night|twilight, default is all
  -v, --verbose         increase output verbosity

# ============================================================================
usage: plot_timeseries.py [-h] -i INPDIR -o OUTDIR [-c CHANNEL] [-t TIME] [-z]
                          [-s SDATE] [-e EDATE] [-v]

plot_timeseries.py displays global means of 1 channel available for all
satellites processed with pyGAC tool.

optional arguments:
  -h, --help            show this help message and exit
  -i INPDIR, --inpdir INPDIR
                        Path, e.g. /path/to/input.txt
  -o OUTDIR, --outdir OUTDIR
                        Path, e.g. /path/to/output.png
  -c CHANNEL, --channel CHANNEL
                        Channel abbreviation, ch1|ch2|ch3b|ch4|ch5|ch3a
  -t TIME, --time TIME  Time abbreviation, day|night|twilight
  -z, --zoom            y-lim: min/max
  -s SDATE, --sdate SDATE
                        Start Date String, e.g. 20090101
  -e EDATE, --edate EDATE
                        End Date String, e.g. 20121231
  -v, --verbose         increase output verbosity

# ============================================================================
usage: plot_timeseries_linregress.py [-h] -i INPFIL -o OUTDIR [-c CHANNEL]
                                     [-t TIME] [-s SDATE] [-e EDATE] [-v]
                                     [-n NOFILTER]

plot_timeseries_linregress.py displays daily global means of 1 satellite, 1
channel and 1 time selection including a linear regressioin.

optional arguments:
  -h, --help            show this help message and exit
  -i INPFIL, --inpfil INPFIL
                        Path, e.g. /path/to/Global_stat.txt
  -o OUTDIR, --outdir OUTDIR
                        Path, e.g. /path/to/output.png
  -c CHANNEL, --channel CHANNEL
                        Channel abbreviation, ch1|ch2|ch3b|ch4|ch5|ch3a
  -t TIME, --time TIME  Time abbreviation, day|night|twilight
  -s SDATE, --sdate SDATE
                        Start Date String, e.g. 20090101
  -e EDATE, --edate EDATE
                        End Date String, e.g. 20121231
  -v, --verbose         increase output verbosity
  -n NOFILTER, --nofilter NOFILTER
                        do not set minimum number of observations, i.e. take
                        all days into account
# ============================================================================
