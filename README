# ============================================================================
# --- README ---
# ============================================================================

usage: add2sqlite_l1c_info.py [-h] -l1b L1B_FILE -l1c L1C_FILE -dir L1C_PATH
                              -dbf DB_FILE [-tmpdir TMP_DIR] [-ver]

add2sqlite_l1c_info.py reads pyGAC L1c output h5 orbit files (avhrr,
qualflags) and adds to L1b sqlite database, valuable L1c information for each
orbit, which has been processed by pyGAC (white-listed L1b). Thus, this script
adds the start and end time of measurement, i.e. timestamp of first and last
scanline, as well as the along and across track dimension. This L1c
information will be later used for calculating the number of AVHRR GAC
overlapping scanlines of two consecutive orbits.

optional arguments:
  -h, --help            show this help message and exit
  -l1b L1B_FILE, --l1b_file L1B_FILE
                        e.g., NSS.GHRR.NJ.D96015.S0112.E0306.B0537071.WI.gz
  -l1c L1C_FILE, --l1c_file L1C_FILE
                        e.g., ECC_GAC_avhrr_noaa14_99999_19960115T0112111Z_199
                        60115T0306281Z.h5
  -dir L1C_PATH, --l1c_path L1C_PATH
                        Directory where L1c files are located.
  -dbf DB_FILE, --db_file DB_FILE
                        /path/to/AVHRR_GAC_archive_L1b_L1c.sqlite3,which
                        should be updated with L1c information
  -tmpdir TMP_DIR, --tmp_dir TMP_DIR
                        Move files having fishy orbit duration to this
                        directory.
  -ver, --verbose       increase output verbosity

# ============================================================================

usage: run_pystat_add2sqlite.py [-h] -d DATE -s SATELLITE -i INPDIR -g GSQLITE
                                [-b BINSIZE] [-t] [-v]

run_pystat_add2sqlite.py calculates statistics (daily zonal and global means)
of AVHRR GAC L1c data processed in the framework of Cloud_cci (pyGAC). For the
VIS channels, statistics is based on daytime observations only, i.e. SZA less
than 80. For the IR channels day/twilight/night observations are considered.
Statistics are stored in a sqlite db. Orbits are processed in parallel mode.

optional arguments:
  -h, --help            show this help message and exit
  -d DATE, --date DATE  Date String, e.g. 20090126
  -s SATELLITE, --satellite SATELLITE
                        Satellite, e.g. metop02
  -i INPDIR, --inpdir INPDIR
                        Path, e.g. /path/to/input
  -g GSQLITE, --gsqlite GSQLITE
                        /path/to/AVHRR_GAC_L1c_pystat.sqlite3
  -b BINSIZE, --binsize BINSIZE
                        Define binsize for latitudinal belts
  -t, --test            Run test with reduced channel and select list
  -v, --verbose         increase output verbosity

# ============================================================================

usage: GAC_overlap.py [-h] --sqlfile SQLFILE

GAC_overlap.py calculates the number of overlapping rows. 3 columns are added:
'start_scanline_endcut' and 'end_scanline_endcut' and 'midnight_scanline' .

optional arguments:
  -h, --help         show this help message and exit
  --sqlfile SQLFILE  /path/to/database.sqlite3

# ============================================================================

usage: vis_avhrrgac.py [-h] [-reg REGION] [-out OUTPUTDIR]
                       [-bmb BASEMAP_BACKGROUND] [-show] [-ver]
                       {map_l1c,map_cci} ...

vis_avhrrgac.py displays AVHRR GAC data (pygac: l1c; cloud_cci: l2, l3u, l3c, l3s).

positional arguments:
  {map_l1c,map_cci}     Select a Subcommand

optional arguments:
  -h, --help            show this help message and exit
  -reg REGION, --region REGION
                        afr, ame, aus, eur, ger, glo, nam, npol, rus, sam,
                        spol
  -out OUTPUTDIR, --outputdir OUTPUTDIR
                        /path/to/mapdir
  -bmb BASEMAP_BACKGROUND, --basemap_background BASEMAP_BACKGROUND
                        bluemarble/shaderelief/etopo
  -show, --show_figure  Show figure instead of saving saving
  -ver, --verbose       increase output verbosity

# ============================================================================

usage: plot_pystat_results.py [-h] -db DBFILE -out OUTDIR [-sd SDATE]
                              [-ed EDATE] [-cha CHANNEL] [-tim TIME]
                              [-sats [SATELLITES [SATELLITES ...]]]
                              [-tar TARGET] [-fit] [-ver] [-show]
                              [-asc ASCIIFILES]

plot_pystat_results.py displays pystat results, i.e. daily global and zonal
means and standard deviations stored in a sqlite database.

optional arguments:
  -h, --help            show this help message and exit
  -db DBFILE, --dbfile DBFILE
                        String, e.g. /path/to/db.sqlite3
  -out OUTDIR, --outdir OUTDIR
                        Path, e.g. /path/to/plot.png
  -sd SDATE, --sdate SDATE
                        Start Date, e.g. 2009-01-01
  -ed EDATE, --edate EDATE
                        End Date, e.g. 2012-12-31
  -cha CHANNEL, --channel CHANNEL
                        Channel abbreviation, available:
                        ch1|ch2|ch3b|ch4|ch5|ch3a
  -tim TIME, --time TIME
                        Time abbreviation, available:
                        day_90sza|day|night|twilight
  -sats [SATELLITES [SATELLITES ...]], --satellites [SATELLITES [SATELLITES ...]]
                        Satellite, available: NOAA7|NOAA9|NOAA11|NOAA12|NOAA14
                        |NOAA15|NOAA16|NOAA17|NOAA18|NOAA19|METOPA|METOPB
  -tar TARGET, --target TARGET
                        Latitudinal (zonal, zonalall) or time series plot
                        (default). NOTE: if you select 'zonal' choose one day
                        or a very small range because you will get
                        additionally one plot per day/satellite/channel/time.
                        If you select 'zonalall' then you will get one plot
                        per day/channel/time including all available
                        satellites.
  -fit, --linfit        If you want to plot a time series including a linear
                        regression (plot per satellite/channel/time).
  -ver, --verbose       increase output verbosity
  -show, --show_figure  Show figure instead of saving saving
  -asc ASCIIFILES, --asciifiles ASCIIFILES
                        read old pystat results stored in ascii files

# ============================================================================
#
usage: get_equator_crossing_time.py [-h] --start_date START_DATE --end_date
                                    END_DATE --l1c_path L1C_PATH [--verbose]

get_equator_crossing_time.py calculates the equator crossing time for each
orbit for the ascending node, i.e. local time of ascending node (LTAN).

optional arguments:
  -h, --help            show this help message and exit
  --start_date START_DATE
                        e.g., 19960115
  --end_date END_DATE   e.g., 19960121
  --l1c_path L1C_PATH   Directory where L1c files are located.
  --verbose             increase output verbosity

# ============================================================================

usage: plot_avhrr_ect_ltan.py [-h] -db DBFILE -out OUTDIR [-sd SDATE]
                              [-ed EDATE]
                              [-sats [SATELLITES [SATELLITES ...]]] [-ver]
                              [-show]

{0} displays AVHRR/NOAAs equator crossing time (local time of ascending node),
which is stored in the AVHRR GAC archive database after L1c processing.

optional arguments:
  -h, --help            show this help message and exit
  -db DBFILE, --dbfile DBFILE
                        String, i.e. /path/to/db.sqlite3
  -out OUTDIR, --outdir OUTDIR
                        String, i.e. /path/to/plot_out/
  -sd SDATE, --sdate SDATE
                        String, Start Date
  -ed EDATE, --edate EDATE
                        String, End Date
  -sats [SATELLITES [SATELLITES ...]], --satellites [SATELLITES [SATELLITES ...]]
                        Satellite, available: NOAA7|NOAA9|NOAA11|NOAA12|NOAA14
                        |NOAA15|NOAA16|NOAA17|NOAA18|NOAA19|METOPA|METOPB
  -ver, --verbose       increase output verbosity
  -show, --show_figure  Show figure instead of saving saving

# ============================================================================

usage: post_proc_avhrrgac_database.py [-h] --dbfile DBFILE [--verbose]
                                      [--satellites [SATELLITES [SATELLITES ...]]]
                                      [--wrong_l1c_timestamp]
                                      [--no_valid_l1c_data] [--bad_n17_data]

post_proc_avhrrgac_database.py corrects AVHRR GAC archive database based on
logfile analysis, i.e. blacklist AVHRR GAC orbitsdue to specific reason

optional arguments:
  -h, --help            show this help message and exit
  --dbfile DBFILE       /path/to/database.sqlite3
  --verbose             increase output verbosity
  --satellites [SATELLITES [SATELLITES ...]]
                        List of satellites, which should be considered
  --wrong_l1c_timestamp
                        Blacklist L1b files getting wrong l1c timestamp. This
                        must be done before GAC_overlap.py, otherwise it will
                        be aborted due to ambiguous entries.
  --no_valid_l1c_data   Blacklist days, where no valid l1c data is available.
                        ATTENTION: only if you know what you are doing! The
                        list_of_invalid_days changes from processing to
                        processing due to pygac updates.
  --bad_n17_data        Blacklist all days between 2010-03-01 and 2011-12-31
                        of NOAA17 because data show problems. AVHRR scan motor
                        stalled on 15 Oct 2010.

# ============================================================================
