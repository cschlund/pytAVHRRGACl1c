# ============================================================================
# --- README ---
# ============================================================================

usage: add2sqlite_l1c_info.py [-h] -dat DATE -sat SATELLITE -inp INPDIR -sql
                              SQLITE [-ver]

add2sqlite_l1c_info.py reads pyGAC L1c output h5 orbit files (avhrr,
qualflags) and adds to L1b sqlite database, valuable L1c information for each
orbit, which has been processed by pyGAC (white-listed L1b). Thus, this script
adds the start and end time of measurement, i.e. timestamp of first and last
scanline, as well as the along and across track dimension. This L1c
information will be later used for calculating the number of AVHRR GAC
overlapping scanlines of two consecutive orbits.

optional arguments:
  -h, --help            show this help message and exit
  -dat DATE, --date DATE
                        String, e.g. 20000101, 2000-01-01
  -sat SATELLITE, --satellite SATELLITE
                        String, e.g. noaa19, NOAA19
  -inp INPDIR, --inpdir INPDIR
                        String, e.g. /path/to/input/files.h5
  -sql SQLITE, --sqlite SQLITE
                        /path/to/AVHRR_GAC_archive_L1b_L1c.sqlite3, which
                        should be updated with L1c information
  -ver, --verbose       increase output verbosity

# ============================================================================

usage: run_pystat_add2sqlite.py [-h] -d DATE -s SATELLITE -i INPDIR -g GSQLITE
                                [-b BINSIZE] [-t] [-v]

run_pystat_add2sqlite.py calculates statistics (daily zonal and global means)
of AVHRR GAC L1c data processed in the framework of Cloud_cci (pyGAC). For the
VIS channels, statistics is based on daytime observations only, i.e. SZA less
than 80. For the IR channels day/twilight/night observations are considered.
Statistics are stored in a sqlite db. Orbits are processed in parallel mode.

optional arguments:
  -h, --help            show this help message and exit
  -d DATE, --date DATE  Date String, e.g. 20090126
  -s SATELLITE, --satellite SATELLITE
                        Satellite, e.g. metop02
  -i INPDIR, --inpdir INPDIR
                        Path, e.g. /path/to/input
  -g GSQLITE, --gsqlite GSQLITE
                        /path/to/AVHRR_GAC_L1c_pystat.sqlite3
  -b BINSIZE, --binsize BINSIZE
                        Define binsize for latitudinal belts
  -t, --test            Run test with reduced channel and select list
  -v, --verbose         increase output verbosity

# ============================================================================

usage: vis_avhrrgac_l1c.py [-h] -c CHANNEL -f FILENAME [-r REGION] [-t TIME]
                           [-v]

This script displays one AVHRR GAC Level 1c orbit processed in the framework
of cloud_cci (gyGAC).

optional arguments:
  -h, --help            show this help message and exit
  -c CHANNEL, --channel CHANNEL
                        ch1|ch2|ch3b|ch4|ch5|ch3a
  -f FILENAME, --filename FILENAME
                        /path/to/ECC_GAC_file.h5
  -r REGION, --region REGION
                        afr, eur, ger, glo, rus
  -t TIME, --time TIME  day|night|twilight, default is all
  -v, --verbose         increase output verbosity

# ============================================================================

usage: GAC_overlap.py [-h] [-s SAT] -g SQLCOMP [-v]

GAC_overlap.py calculates the number of overlapping rows. Five columns are
added: 'start_scanline_begcut' and 'end_scanline_begcut' in case the beginning
of the orbits will be cut, 'start_scanline_endcut' and 'end_scanline_endcut'
in case the end of the orbit will be cut, and 'midnight_scanline' giving the
midnight orbit scan line.

optional arguments:
  -h, --help            show this help message and exit
  -s SAT, --sat SAT     Available are: NOAA7|NOAA9|NOAA11|NOAA12|NOAA14|NOAA15
                        |NOAA16|NOAA17|NOAA18|NOAA19|METOPA|METOPB, default:
                        use all
  -g SQLCOMP, --sqlcomp SQLCOMP
                        /path/to/sqlitefile.sqlite3
  -v, --verbose         increase output verbosity

# ============================================================================

usage: plot_pystat_results.py [-h] -db DBFILE -out OUTDIR -sd SDATE -ed EDATE
                              [-cha CHANNEL] [-tim TIME] [-sat SATELLITE]
                              [-tar TARGET] [-fit] [-ver] [-asc ASCIIFILES]

plot_pystat_results.py displays pystat results, i.e. daily global and zonal
means and standard deviations stored in a sqlite database.

optional arguments:
  -h, --help            show this help message and exit
  -db DBFILE, --dbfile DBFILE
                        String, e.g. /path/to/db.sqlite3
  -out OUTDIR, --outdir OUTDIR
                        Path, e.g. /path/to/plot.png
  -sd SDATE, --sdate SDATE
                        Start Date, e.g. 2009-01-01
  -ed EDATE, --edate EDATE
                        End Date, e.g. 2012-12-31
  -cha CHANNEL, --channel CHANNEL
                        Channel abbreviation, available:
                        ch1|ch2|ch3b|ch4|ch5|ch3a
  -tim TIME, --time TIME
                        Time abbreviation, available: day|night|twilight
  -sat SATELLITE, --satellite SATELLITE
                        Satellite, available: NOAA7|NOAA9|NOAA11|NOAA12|NOAA14
                        |NOAA15|NOAA16|NOAA17|NOAA18|NOAA19|METOPA|METOPB
  -tar TARGET, --target TARGET
                        Latitudinal (zonal, zonalall) or time series plot
                        (default). NOTE: if you select 'zonal' choose one day
                        or a very small range because you will get
                        additionally one plot per day/satellite/channel/time.
                        If you select 'zonalall' then you will get one plot
                        per day/channel/time including all available
                        satellites.
  -fit, --linfit        If you want to plot a time series including a linear
                        regression (plot per satellite/channel/time).
  -ver, --verbose       increase output verbosity
  -asc ASCIIFILES, --asciifiles ASCIIFILES
                        read old pystat results stored in ascii files

# ============================================================================
